# function for exchanging two elements
def swap_elements(my_list, index1, index2):
    temp = my_list[index1]
    my_list[index1] = my_list[index2]
    my_list[index2] = temp


# partition function for quick sort
def partition(my_list, start, end):
    p = end # index of pivot
    b = start # index of bigger elements than pivot
    s = start # index of same elements with pivot
    i = start # index of current elements

    while i < p: # before the pivot
        if my_list[i] < my_list[p]: # if current element is smaller than pivot
            swap_elements(my_list, i, b)
            swap_elements(my_list, b ,s)
            b += 1
            s += 1
        elif my_list[i] == my_list[p]: # if current element is same with pivot
            swap_elements(my_list, i, b)
            b += 1
        i += 1

    swap_elements(my_list, b, p) # finally exchange pivot and the first element of bigger elements
    p = b # then, now pivot's position

    return p,s # because we need to know starting index number and end index number of pivot for other quick sort


# quick sort
def quicksort(my_list, start, end):
    if end - start < 1:
        return

    p, s = partition(my_list, start, end) # p and s are the starting index number and end index number of pivots
    quicksort(my_list, start, s - 1) # quick sort for smaller elements
    quicksort(my_list, p + 1, end) # quick sort for bigger elements


# test 1
list1 = [1, 9, 5, 6, 4, 2, 5, 3, 5]
quicksort(list1, 0, len(list1) - 1)
print(list1)
